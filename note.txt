所谓算法，是解决一类问题的通法，即一系列清晰无歧义的计算指令。

算法的时间复杂度反映了程序执行时间随输入规模增长而增长的量级，在很大程度上能很好反映出算法的优劣与否。

最坏时间复杂度：输入数据状态最不理想情况下的时间复杂度，也就是算法时间复杂度的上界。若没有特别声明，时间复杂度就是指最坏时间复杂度。
平均时间复杂度：在所有可能的输入实例均以等概率出现的情况下，算法的期望时间复杂度。
最好时间复杂度：输入数据状态最理想情况下的时间复杂度。

常见的算法时间复杂度由小到大依次为：
O(1)<O(log2(n))<O(n)<O(nlog2(n))<O(n^2)<O(n^3)<...<O(n!)<O(n^n)

时间复杂度预估步骤
找出基本语句：算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。
计算基本语句的执行次数的数量级：只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，
可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。
用O()表示算法的时间性能：将基本语句执行次数的数量级放入O()中。



